// 리액트 가상돔
// 가상돔은 실제돔의 변화를 최소화 시켜주는 역할을 한다.
// 가상돔을 사용하지 않으면 30개의 변화가 있다면 실제돔은 30번의 변화를 렌더링 해야한다.
// 하지만 가상돔을 사용한다면 30개의 변화를 하나로 묶어 실제돔에게 1번의 렌더링으로 30번의 변화 내용을 가져올 수 있다.
// 이러한 효율성 때문에 가상돔을 사용하게 된다. 

// 가상돔을 이해하려면 브라우저 렌더링 과정을 알아야한다.
// DOM tree 생성 -> HTML을 파싱하여 DOM노드로 이루어진 트리를 생성
// render tree 생성 -> CSS파일 파싱하여 렌더 트리 생성
// script 태그 만나면 HTML 파싱 중단하고 JavaScript 코드 파싱
// 뷰포트 기반으로 렌더트리의 각 노드 위치와 크기 결정
// 실제 화면에 나타남

// DOM은 상태변화시 렌더링이 된다.

// SPA를 사용하면서 DOM tree를 즉각적으로 변경하는 일이 많아짐
// SPA란 (Single Page Application) 로드시에 전체 페이지를 한 번에 로딩하여 변경된 부분만 새로고침이 일어나는 것을 뜻함.
// SPA는 전체페이지를 서버에서 보내주는것이 아닌 JavaScript에서 관리를 하기 때문에 DOM조작을 효율적으로 하기 위해 virtual DOM을 사용하게 됨.

// virtual DOM의 내용을 변경 전과 변경 후를 비교하여 변경된 내용만 real DOM에 적용시킨다.

// 재조정?
// real DOM(실제돔)을 제어하지 않고 중간에 virtual DOM(가상돔)을 사용하여 가상돔이 변경이 될 때, 실제돔을 변경하도록 제작이 되었다 이작업을 재조정이라 합니다.
// 간단하게 virtual DOM의 내용을 변경 전과 변경 후를 비교하여 변경된 내용만 real DOM에 적용시킨다. - 재조정이라고함.

// virtual DOM 갱신 방법 2가지
// setState() 메서드를 호출한다.
// Redux경우 store가 변하면서 최상위 컴포넌트의 render()함수를 호출하여 갱신하는 방법.

// setState 사용 이유
// state는 불변성을 유지해야한다. 컴포넌트는 setState를 비교해서 업데이트가 필요시에만 render함수를 호출하는데 
// 직접 수정시 리액트가 render함수를 호출하지 않아 상태변경이 일어나도 렌더링이 일어나지 않는다.

